{"ast":null,"code":"import { GET_POSTS, POST_ERROR, ADD_POST_REQUEST, ADD_POST, GET_POST, UPDATE_LIKES, CLEAR_POST, ADD_COMMENT, REMOVE_COMMENT, DELETE_POST } from \"./post.types\";\nconst initialState = {\n  post: null,\n  posts: [],\n  loading: true,\n  error: {}\n};\nexport default function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case ADD_POST_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [...state.posts, payload],\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        post: { ...state.post,\n          likes: payload.likes\n        },\n        loading: false\n      };\n\n    case CLEAR_POST:\n      return { ...state,\n        post: null,\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/karthikkonyala/Documents/Projects/Wobble/client/src/redux/post/post.reducer.js"],"names":["GET_POSTS","POST_ERROR","ADD_POST_REQUEST","ADD_POST","GET_POST","UPDATE_LIKES","CLEAR_POST","ADD_COMMENT","REMOVE_COMMENT","DELETE_POST","initialState","post","posts","loading","error","state","action","type","payload","likes","comments","filter","comment","_id"],"mappings":"AAAA,SACEA,SADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,QAJF,EAKEC,QALF,EAMEC,YANF,EAOEC,UAPF,EAQEC,WARF,EASEC,cATF,EAUEC,WAVF,QAWO,cAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKb,QAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYJ,QAAAA,IAAI,EAAEO,OAAlB;AAA2BL,QAAAA,OAAO,EAAE;AAApC,OAAP;;AACF,SAAKb,SAAL;AACE,aAAO,EAAE,GAAGe,KAAL;AAAYH,QAAAA,KAAK,EAAEM,OAAnB;AAA4BL,QAAAA,OAAO,EAAE;AAArC,OAAP;;AACF,SAAKX,gBAAL;AACE,aAAO,EAAE,GAAGa,KAAL;AAAYF,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKV,QAAL;AACE,aAAO,EAAE,GAAGY,KAAL;AAAYH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBM,OAAjB,CAAnB;AAA8CL,QAAAA,OAAO,EAAE;AAAvD,OAAP;;AACF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,IAAI,EAAE,EAAE,GAAGI,KAAK,CAACJ,IAAX;AAAiBQ,UAAAA,KAAK,EAAED,OAAO,CAACC;AAAhC,SAFD;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,UAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYJ,QAAAA,IAAI,EAAE,IAAlB;AAAwBE,QAAAA,OAAO,EAAE;AAAjC,OAAP;;AACF,SAAKN,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,IAAI,EAAE,EAAE,GAAGI,KAAK,CAACJ,IAAX;AAAiBS,UAAAA,QAAQ,EAAEF;AAA3B,SAFD;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELJ,QAAAA,IAAI,EAAE,EACJ,GAAGI,KAAK,CAACJ,IADL;AAEJS,UAAAA,QAAQ,EAAEL,KAAK,CAACJ,IAAN,CAAWS,QAAX,CAAoBC,MAApB,CACPC,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBL,OADrB;AAFN,SAFD;AAQLL,QAAAA,OAAO,EAAE;AARJ,OAAP;;AAUF,SAAKJ,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAoBV,IAAD,IAAUA,IAAI,CAACY,GAAL,KAAaL,OAA1C,CAFF;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKZ,UAAL;AACE,aAAO,EAAE,GAAGc,KAAL;AAAYD,QAAAA,KAAK,EAAEI,OAAnB;AAA4BL,QAAAA,OAAO,EAAE;AAArC,OAAP;;AACF;AACE,aAAOE,KAAP;AA3CJ;AA6CD","sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  ADD_POST_REQUEST,\n  ADD_POST,\n  GET_POST,\n  UPDATE_LIKES,\n  CLEAR_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  DELETE_POST,\n} from \"./post.types\";\n\nconst initialState = {\n  post: null,\n  posts: [],\n  loading: true,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_POST:\n      return { ...state, post: payload, loading: false };\n    case GET_POSTS:\n      return { ...state, posts: payload, loading: false };\n    case ADD_POST_REQUEST:\n      return { ...state, loading: true };\n    case ADD_POST:\n      return { ...state, posts: [...state.posts, payload], loading: false };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        post: { ...state.post, likes: payload.likes },\n        loading: false,\n      };\n    case CLEAR_POST:\n      return { ...state, post: null, loading: false };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false,\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            (comment) => comment._id !== payload\n          ),\n        },\n        loading: false,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== payload),\n        loading: false,\n      };\n    case POST_ERROR:\n      return { ...state, error: payload, loading: false };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}