{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, LOGIN_REQUEST, REGISTER_REQUEST } from \"./auth.types\";\nimport { CLEAR_PROFILE } from \"../profile/profile.types\";\nimport { setAlert } from \"../alert/alert.actions\";\nimport setAuthToken from \"../../utils/setAuthToken\"; // Load user from token\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register an user\n\nexport const registerUser = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      // Dispatch REGISTER_REQUEST\n      dispatch({\n        type: REGISTER_REQUEST\n      }); // Make a request to backend API\n\n      const res = await axios.post(\"/api/users\", body, config); // If no errors, dispatch REGISTER_SUCCESS\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      // Send alerts\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"is-danger\")));\n      }\n\n      if (err.response.data.msg) {\n        dispatch(setAlert(err.response.data.msg, \"is-danger\"));\n      } // Dispatch REGISTER_FAIL if error\n\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login an user\n\nexport const loginUser = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    // Dispatch LOGIN_REQUEST\n    dispatch({\n      type: LOGIN_REQUEST\n    }); // Make a request to backend API\n\n    const res = await axios.post(\"/api/auth\", body, config); // If no errors, dispatch LOGIN_SUCCESS\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    if (err.response.data.msg) {\n      dispatch(setAlert(err.response.data.msg, \"is-danger\"));\n    } // Dispatch LOGIN_FAIL if error\n\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout an user\n\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/karthikkonyala/Documents/Projects/Wobble/client/src/redux/auth/auth.actions.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","LOGIN_REQUEST","REGISTER_REQUEST","CLEAR_PROFILE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","registerUser","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","loginUser","logoutUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,aARF,EASEC,gBATF,QAUO,cAVP;AAWA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAOC,YAAP,MAAyB,0BAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAU,WAAV,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB,WADC;AAEPiB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAGD;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMmB,YAAY,GAAG;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD;AAAA,SAA+B,MAAOZ,QAAP,IAAoB;AAC7E,UAAMa,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAf,CAAb;;AAEA,QAAI;AACF;AACAZ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEV;AADC,OAAD,CAAR,CAFE,CAMF;;AACA,YAAMQ,GAAG,GAAG,MAAMjB,KAAK,CAACgC,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB,CAPE,CASF;;AACAb,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAElB,gBADC;AAEPmB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAKAP,MAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,KAhBD,CAgBE,OAAOS,GAAP,EAAY;AACZ;AACA,YAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWtB,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,WAAZ,CAAT,CAAlC;AACD;;AACD,UAAIf,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBgB,GAAtB,EAA2B;AACzBvB,QAAAA,QAAQ,CAACH,QAAQ,CAACW,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBgB,GAAnB,EAAwB,WAAxB,CAAT,CAAR;AACD,OARW,CAUZ;;;AACAvB,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEjB;AADC,OAAD,CAAR;AAGD;AACF,GAvC2B;AAAA,CAArB,C,CAyCP;;AACA,OAAO,MAAMoC,SAAS,GAAG,CAACb,KAAD,EAAQC,QAAR,KAAqB,MAAOZ,QAAP,IAAoB;AAChE,QAAMa,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAEA,MAAI;AACF;AACAZ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR,CAFE,CAMF;;AACA,UAAMS,GAAG,GAAG,MAAMjB,KAAK,CAACgC,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB,CAPE,CASF;;AACAb,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,aADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GAhBD,CAgBE,OAAOS,GAAP,EAAY;AACZ;AACA,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWtB,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,WAAZ,CAAT,CAAlC;AACD;;AACD,QAAIf,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBgB,GAAtB,EAA2B;AACzBvB,MAAAA,QAAQ,CAACH,QAAQ,CAACW,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBgB,GAAnB,EAAwB,WAAxB,CAAT,CAAR;AACD,KARW,CAUZ;;;AACAvB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CAvCM,C,CAyCP;;AACA,OAAO,MAAMiC,UAAU,GAAG,MAAOzB,QAAD,IAAc;AAC5CA,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;AAGAI,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGD,CAPM","sourcesContent":["import axios from \"axios\";\n\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  LOGIN_REQUEST,\n  REGISTER_REQUEST\n} from \"./auth.types\";\nimport { CLEAR_PROFILE } from \"../profile/profile.types\";\nimport { setAlert } from \"../alert/alert.actions\";\n\nimport setAuthToken from \"../../utils/setAuthToken\";\n\n// Load user from token\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register an user\nexport const registerUser = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    // Dispatch REGISTER_REQUEST\n    dispatch({\n      type: REGISTER_REQUEST,\n    });\n\n    // Make a request to backend API\n    const res = await axios.post(\"/api/users\", body, config);\n\n    // If no errors, dispatch REGISTER_SUCCESS\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n    if (err.response.data.msg) {\n      dispatch(setAlert(err.response.data.msg, \"is-danger\"));\n    }\n\n    // Dispatch REGISTER_FAIL if error\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login an user\nexport const loginUser = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ email, password });\n\n  try {\n    // Dispatch LOGIN_REQUEST\n    dispatch({\n      type: LOGIN_REQUEST,\n    });\n\n    // Make a request to backend API\n    const res = await axios.post(\"/api/auth\", body, config);\n\n    // If no errors, dispatch LOGIN_SUCCESS\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n    if (err.response.data.msg) {\n      dispatch(setAlert(err.response.data.msg, \"is-danger\"));\n    }\n\n    // Dispatch LOGIN_FAIL if error\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout an user\nexport const logoutUser = () => (dispatch) => {\n  dispatch({\n    type: CLEAR_PROFILE,\n  });\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}