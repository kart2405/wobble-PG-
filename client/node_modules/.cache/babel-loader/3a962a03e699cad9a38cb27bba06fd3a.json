{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"../alert/alert.actions\";\nimport { GET_PROFILE, PROFILE_ERROR, GET_PROFILES, CLEAR_PROFILE, GET_REPOS } from \"./profile.types\"; // Get current user profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get(\"/api/profile/me\");\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = function (formData, history) {\n  let edit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await axios.post(\"/api/profile\", formData, config);\n      dispatch({\n        type: GET_PROFILE,\n        payload: res.data\n      });\n      dispatch(setAlert(edit ? \"Profile updated\" : \"Profile created\", \"is-success\"));\n      history.push(\"/dashboard\");\n    } catch (err) {\n      // Send alerts\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"is-danger\")));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile\");\n    dispatch({\n      type: CLEAR_PROFILE\n    });\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = (userId, history) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    }); // Send to 404 page\n\n    history.push(\"/profile/404\");\n  }\n}; // Get GitHub repos\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/karthikkonyala/Documents/Projects/Wobble/client/src/redux/profile/profile.actions.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","GET_PROFILES","CLEAR_PROFILE","GET_REPOS","getCurrentProfile","dispatch","type","res","get","payload","data","err","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","getProfiles","getProfileById","userId","getGithubRepos","username"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport { setAlert } from \"../alert/alert.actions\";\nimport {\n  GET_PROFILE,\n  PROFILE_ERROR,\n  GET_PROFILES,\n  CLEAR_PROFILE,\n  GET_REPOS,\n} from \"./profile.types\";\n\n// Get current user profile\nexport const getCurrentProfile = () => async (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n  try {\n    const res = await axios.get(\"/api/profile/me\");\n    dispatch({ type: GET_PROFILE, payload: res.data });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Create or update profile\nexport const createProfile = (formData, history, edit = false) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const res = await axios.post(\"/api/profile\", formData, config);\n\n    dispatch({ type: GET_PROFILE, payload: res.data });\n    dispatch(\n      setAlert(edit ? \"Profile updated\" : \"Profile created\", \"is-success\")\n    );\n\n    history.push(\"/dashboard\");\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get all profiles\nexport const getProfiles = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/api/profile\");\n    dispatch({ type: CLEAR_PROFILE });\n    dispatch({ type: GET_PROFILES, payload: res.data });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get profile by ID\nexport const getProfileById = (userId, history) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n    // Send to 404 page\n    history.push(\"/profile/404\");\n  }\n};\n\n// Get GitHub repos\nexport const getGithubRepos = (username) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n    dispatch({ type: GET_REPOS, payload: res.data });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}