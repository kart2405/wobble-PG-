{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"../alert/alert.actions\";\nimport { GET_POST, GET_POSTS, POST_ERROR, ADD_POST, ADD_POST_REQUEST, UPDATE_LIKES, ADD_COMMENT, REMOVE_COMMENT, DELETE_POST } from \"./post.types\"; // Get personal feed\n\nexport const getFeed = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts/feed\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add a new post\n\nexport const addPost = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  };\n\n  try {\n    dispatch({\n      type: ADD_POST_REQUEST\n    });\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    history.push(\"/posts\");\n    dispatch(setAlert(\"Successfully added a post\", \"is-success\"));\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post by ID\n\nexport const getPostById = (postId, history) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n    history.push(\"/posts/404\");\n  }\n}; // Add like\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add a comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment added\", \"is-success\"));\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete a comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment deleted\", \"is-danger\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete a post\n\nexport const deletePost = (postId, history) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    dispatch(setAlert(\"Post was deleted\", \"is-success\"));\n    history.push(\"/posts\");\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/karthikkonyala/Documents/Projects/Wobble/client/src/redux/post/post.actions.js"],"names":["axios","setAlert","GET_POST","GET_POSTS","POST_ERROR","ADD_POST","ADD_POST_REQUEST","UPDATE_LIKES","ADD_COMMENT","REMOVE_COMMENT","DELETE_POST","getFeed","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addPost","formData","history","config","headers","post","push","errors","forEach","error","getPostById","postId","addLike","put","likes","removeLike","addComment","deleteComment","commentId","delete","deletePost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport { setAlert } from \"../alert/alert.actions\";\nimport {\n  GET_POST,\n  GET_POSTS,\n  POST_ERROR,\n  ADD_POST,\n  ADD_POST_REQUEST,\n  UPDATE_LIKES,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  DELETE_POST,\n} from \"./post.types\";\n\n// Get personal feed\nexport const getFeed = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/api/posts/feed\");\n    dispatch({ type: GET_POSTS, payload: res.data });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add a new post\nexport const addPost = (formData, history) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    },\n  };\n\n  try {\n    dispatch({ type: ADD_POST_REQUEST });\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({ type: ADD_POST, payload: res.data });\n    history.push(\"/posts\");\n    dispatch(setAlert(\"Successfully added a post\", \"is-success\"));\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post by ID\nexport const getPostById = (postId, history) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({ type: GET_POST, payload: res.data });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n    history.push(\"/posts/404\");\n  }\n};\n\n// Add like\nexport const addLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({ type: UPDATE_LIKES, payload: { postId, likes: res.data } });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Remove like\nexport const removeLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({ type: UPDATE_LIKES, payload: { postId, likes: res.data } });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add a comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n    dispatch({ type: ADD_COMMENT, payload: res.data });\n    dispatch(setAlert(\"Comment added\", \"is-success\"));\n  } catch (err) {\n    // Send alerts\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"is-danger\")));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete a comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({ type: REMOVE_COMMENT, payload: commentId });\n    dispatch(setAlert(\"Comment deleted\", \"is-danger\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete a post\nexport const deletePost = (postId, history) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n    dispatch({ type: DELETE_POST, payload: postId });\n    dispatch(setAlert(\"Post was deleted\", \"is-success\"));\n    history.push(\"/posts\");\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}